/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package omsai;



import common.CreateExcelFile;
import common.Sqlliteconnection;
import common.commonFetchData;
import common.commonUtility;
import common.loader;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Nilesh
 */
public class databaseBackup extends javax.swing.JFrame {

    /**
     * Creates new form databaseBackup
     */
    public databaseBackup() {
        initComponents();
        hideDatePicker();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        db = new javax.swing.JCheckBox();
        Excel = new javax.swing.JCheckBox();
        selectFolderPath = new javax.swing.JLabel();
        backupData = new javax.swing.JButton();
        dataBaseBkType = new javax.swing.JComboBox<>();
        from_date = new org.jdesktop.swingx.JXDatePicker();
        to_date = new org.jdesktop.swingx.JXDatePicker();
        from_label = new javax.swing.JLabel();
        to_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Database Backup");

        jButton1.setText("Select Backup Locaton");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        db.setSelected(true);
        db.setText("Database Backup in .db file ");
        db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbActionPerformed(evt);
            }
        });

        Excel.setText("Database Backup in Excel File");

        selectFolderPath.setText("Please select backup location");

        backupData.setText("backup");
        backupData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupDataActionPerformed(evt);
            }
        });

        dataBaseBkType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Today", "Between Date" }));
        dataBaseBkType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dataBaseBkTypeItemStateChanged(evt);
            }
        });

        from_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                from_dateActionPerformed(evt);
            }
        });

        from_label.setText("From :");

        to_label.setText("To");

        jLabel2.setText("Select Bacup type :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backupData)
                            .addComponent(selectFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(from_label)
                    .addComponent(jLabel2))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dataBaseBkType, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(from_date, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(to_label)
                        .addGap(18, 18, 18)
                        .addComponent(to_date, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(Excel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(db, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataBaseBkType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(from_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from_label)
                    .addComponent(to_label))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db)
                    .addComponent(Excel))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFolderPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(backupData)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
public void hideDatePicker(){
    from_label.hide();
    from_date.setVisible(false);
    to_label.setVisible(false);
    to_date.setVisible(false);
}

public void showDatePicker(){
      from_label.setVisible(true);
    from_date.setVisible(true);
    to_label.setVisible(true);
    to_date.setVisible(true);
}
    public String openDialog() {
        String selectdPath = "";
        // create an object of JFileChooser class 
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        // set the selection mode to directories only 
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // invoke the showsOpenDialog function to show the save dialog 
        int r = j.showOpenDialog(null);

        if (r == JFileChooser.APPROVE_OPTION) {
            // set the label to the path of the selected directory 
            selectdPath = j.getSelectedFile().getAbsolutePath();
        } // if the user cancelled the operation 
        else {
            selectdPath = "the user cancelled the operation";
        }
        return selectdPath;

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String selectedPath = openDialog();
        selectFolderPath.setText(selectedPath);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbActionPerformed

    public void backupAllSystemDatabase(String selectedPath) throws IOException{
                Date date= new Date();
                long time = date.getTime();
                Properties properties = commonUtility.getProperties();
                String folderName = properties.getProperty("backupFolderName")+time;
                String folderPath = selectedPath +File.separator+folderName;
                Boolean isFolderCreated = commonUtility.createFolder(folderPath);
                if(isFolderCreated){
                    commonUtility.backupDatabaseInApplicaton(folderPath);
                }
                
               //selcted excel folder
                String excelFolderName = properties.getProperty("backupFolderName")+"_Excel"+time;
                 String excelFolderPath = folderPath +File.separator+ excelFolderName;
                 Boolean isExcelFolderCreated = commonUtility.createFolder(excelFolderPath);
                 String customerBkPath = excelFolderPath+File.separator+"customer";
                  Boolean isExcelCustimerFolder = commonUtility.createFolder(customerBkPath);
                  String colletionBacupFolder = excelFolderPath+File.separator+"collection";
                   Boolean isExcelCollectionFolder = commonUtility.createFolder(colletionBacupFolder);
                 if(isExcelFolderCreated && isExcelCustimerFolder && isExcelCollectionFolder){
               
               //customer RECORDS in excel file
                  List<Map<String,Object>> allCuustomer = commonFetchData.getAllCustomerDetails(null);
                  System.out.println("omsai.databaseBackup.backupAllSystemDatabase() "+ allCuustomer);
            
           
           
                

               
                     
                List<String> headerRow = new ArrayList<String>();
		headerRow.add("Employee No");
		headerRow.add("Employee Name");
		headerRow.add("Employee Address");

		List<String> firstRow = new ArrayList<String>();
		firstRow.add("1111");
		firstRow.add("Gautam");
		firstRow.add("India");

		List<List> recordToAdd = new ArrayList<List>();
		recordToAdd.add(headerRow);
		recordToAdd.add(firstRow);

		CreateExcelFile cls = new CreateExcelFile();
                try {
                     cls.createExcel(recordToAdd);
                     //cls.createExcelFile(mainFolder);
                  
                } catch (Exception ex) {
                    Logger.getLogger(databaseBackup.class.getName()).log(Level.SEVERE, null, ex);
                }
              }
    }
    private void backupDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupDataActionPerformed
        // TODO add your handling code here:
        loader li = new loader();
        li.show();
        databaseBackup bd = new databaseBackup();
        bd.disable();
        String selectedPath = selectFolderPath.getText();
        //backup in applicaton folder
             if (!selectedPath.equalsIgnoreCase("Please select backup location")) {
               if(dataBaseBkType.getSelectedIndex() == 0){
                   try {
                       //All database backup
                       backupAllSystemDatabase(selectedPath);
                   } catch (IOException ex) {
                       Logger.getLogger(databaseBackup.class.getName()).log(Level.SEVERE, null, ex);
                   }
               }else if(dataBaseBkType.getSelectedIndex() == 1){
                   //today backuo
               }else if(dataBaseBkType.getSelectedIndex() == 2){
                   //between date backup
               }
            }

            Timer timer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ((Timer)evt.getSource()).stop();
                    li.dispose();
                    
                    bd.dispose();
            }
        });
        timer.start();
    }//GEN-LAST:event_backupDataActionPerformed

    private void from_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_from_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_from_dateActionPerformed

    private void dataBaseBkTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dataBaseBkTypeItemStateChanged
        // TODO add your handling code here:
        System.out.println("omsai.databaseBackup.jComboBox1ItemStateChanged()");
        int selectedIndex = dataBaseBkType.getSelectedIndex();
        if(selectedIndex == 2){
            showDatePicker();
        }else{
            hideDatePicker();
        }
    }//GEN-LAST:event_dataBaseBkTypeItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(databaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(databaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(databaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(databaseBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new databaseBackup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Excel;
    private javax.swing.JButton backupData;
    private javax.swing.JComboBox<String> dataBaseBkType;
    private javax.swing.JCheckBox db;
    private org.jdesktop.swingx.JXDatePicker from_date;
    private javax.swing.JLabel from_label;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel selectFolderPath;
    private org.jdesktop.swingx.JXDatePicker to_date;
    private javax.swing.JLabel to_label;
    // End of variables declaration//GEN-END:variables
}
