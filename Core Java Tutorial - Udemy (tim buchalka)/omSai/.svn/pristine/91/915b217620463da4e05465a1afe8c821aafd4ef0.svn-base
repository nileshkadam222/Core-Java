/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nilesh
 */
public class commonUtility {
    
    /**
     *
     */
    
    public static String getApplicationPath(){
        return System.getenv("applicationPath");
    }
    public static Properties getProperties(){
        Properties prop = new Properties();
         InputStream in;
        try {
            String appPath = getApplicationPath();
            in = new FileInputStream(appPath+"/application/applicationConfig.properties");
             prop.load(in);
             System.out.println(prop.getProperty("applcationPath"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(commonUtility.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(commonUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        return prop;
    }
    
    
  
public static void backupDatabaseInApplicaton(String ParentFolderPath) throws IOException {
    String appPath = getApplicationPath();
    InputStream is = null;
    OutputStream os = null;
    try {
       
        Date date= new Date();
        long time = date.getTime();
         Properties properties = commonUtility.getProperties();
         String folderName = properties.getProperty("backupFolderName")+"_database"+time;
               
        File newFolder = new File(ParentFolderPath+"/"+folderName);
        boolean created =  newFolder.mkdir();
        
        if(created){
        is = new FileInputStream(appPath+"/application/storage/autoLoneManager.db");
        os = new FileOutputStream(ParentFolderPath+"/"+folderName+"/autoLoneManager.db");
        byte[] buffer = new byte[1024];
        int length;
        while ((length = is.read(buffer)) > 0) {
            os.write(buffer, 0, length);
        }
        }else{
            
        }
        
    } finally {
        is.close();
        os.close();
    }
}

public static String createFolder(String folderPath){
        Date date= new Date();
        long time = date.getTime();
        Properties properties = commonUtility.getProperties();
        String folderName = properties.getProperty("backupFolderName")+time;
        String parentFolderPath = folderPath +"/"+folderName;
        File newFolder = new File(parentFolderPath);
        boolean created =  newFolder.mkdir();
        return  parentFolderPath;
}
public static void backupDatabaseInUserLoaction(String folderPath) throws IOException {
    String appPath = getApplicationPath();
    InputStream is = null;
    OutputStream os = null;
    try {
        
        Date date= new Date();
        long time = date.getTime();
        Properties properties = commonUtility.getProperties();
        String folderName = properties.getProperty("backupFolderName")+"_database"+time;
        
        File newFolder = new File(folderPath +"/"+folderName);
        boolean created =  newFolder.mkdir();
        
        if(created){
        is = new FileInputStream(appPath+"/application/storage/autoLoneManager.db");
        os = new FileOutputStream(folderPath+"/"+folderName+"/autoLoneManager.db");
        byte[] buffer = new byte[1024];
        int length;
        while ((length = is.read(buffer)) > 0) {
            os.write(buffer, 0, length);
        }
        }else{
            
        }
        
    } finally {
        is.close();
        os.close();
    }
}

    
   
}
